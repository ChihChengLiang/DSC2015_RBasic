- Class: meta
  Course: DSC2015
  Lesson: RBasic_Part_2:_Data_Structure_in_R
  Author: Ning Chen
  Type: Standard
  Organization: DSC 2015 R Tutorial
  Version: 0.1

- Class: text
  Output: 在這一小節中，我們將探討 R 內建的許多資料結構與他們的相關操作。
  
- Class: text
  Output: 包括向量(Vector)、矩陣(Matrix)、List、資料表(Data Frame)與 Factor。
  
- Class: text
  Output: 讓我們開始吧! 首先是 R 中的向量(Vector)。
  
- Class: text
  Output: 在 R 中建立向量的方法是使用c函數 (concatenate function)。
  
- Class: cmd_question
  Output: 練習看看! 使用 c() 來建立一個向量 today 紀錄今天的日期吧!
  CorrectAnswer: 'today <- as.numeric(strsplit(format(Sys.Date(), "%Y-%m-%d"), "-")[[1]])'
  AnswerTests: omnitest(correctVal = "ans_date")
  Hint: 假如今天是 2015/01/01，答案就是 today = c(2015, 1, 1) 喔!

- Class: cmd_question
  Output: 我們也可以用 [] 來存取向量中的資料，試試看 today[1] 吧!
  CorrectAnswer: 'today[1]'
  AnswerTests: omnitest("today[1]")
  
- Class: text
  Output: R 中的向量也為它取名字喔! 這樣可以方便存取資料。來用一個 today_named 是有 year, month, day 3 個欄位的向量吧!
  
- Class: text
  Output: 舉例來說，my_vec=c(first_name="Ning",last_name="Chen") 會建立一個 my_vec 有兩個欄位 first_name 與 last_name。

- Class: cmd_question
  Output: 試試看吧! 造個 today_named 向量是有欄位名字的向量紀錄今天的日期。
  CorrectAnswer: 'today_named = today; names(today_named) = c("year", "month", "day")'
  AnswerTests: omnitest(correctVal = "named_ans_date")
  Hint: 語法是 c(name=value, name=value, ...) 喔!

- Class: cmd_question
  Output: 取名字的好處是，我們可以用欄位名去存取相關資料，語法也比較清楚好讀。試試看 today_named["year"]
  CorrectAnswer: 'today_named["year"]'
  AnswerTests: any_of_exprs('today_named["year"]', "today_named['year']")
  Hint: 請輸入 today_named["year"]

- Class: text
  Output: 同樣是存取年份，today_named["year"] 是不是比 today[1] 好讀很多啊!

- Class: text
  Output: 再來我們介紹矩陣(Matrix)。與向量不同的是，矩陣有兩個維度....

- Class: text
  Output: 兩個維度?! 圖片說明請到這個網址看看 --> http://dboyliao.github.io/RBasic_reveal/#/8/1

- Class: text
  Output: 我們可以用 matrix 這個內建函數建立矩陣。

- Class: cmd_question
  Output: 讓我們來試試看 matrix 這個內建函數吧! 請輸入 my_mat = matrix(c(1:15), 3, 5)。
  CorrectAnswer: 'my_mat=matrix(c(1:15), 3, 5)'
  AnswerTests: test_mat_exp1()

- Class: text
  Output: 存取矩陣中的特定元素也很簡單，譬如 my_mat[1, 1] 會回傳 my_mat 第一行第一列的元素。
  
- Class: cmd_question
  Output: 自己試試看吧! 注意 my_mat 中的數字的排列方式。輸入 skip() 繼續。
  CorrectAnswer: "'TWUseR Rocks!'"
  AnswerTests: omnitest("'TWUseR Rocks!'")
  Hint: ''

- Class: text
  Output: 我們不只可以存取單一一個元素，也可以存取特定區塊。

- Class: cmd_question
  Output: 讓我們看幾個例子，輸入 my_mat[1:3, 3:5]。
  CorrectAnswer: my_mat[1:3, 3:5]
  AnswerTests: test_mat_exp2()
  Hint: 請輸入 my_mat[1:3, 3:5]

- Class: text
  Output: vector 與 matrix 有個使用上的限制。

- Class: text
  Output: 所有元素都必須是同一種資料類型。

- Class: text
  Output: 譬如說，必須全部都是數字或全部都是字串等等。

- Class: text
  Output: 那如果硬是把不同類型的資料放在一起會怎樣呢?

- Class: cmd_question
  Output: 來實驗一下吧! 輸入 vec = c('1', 2, 3)
  CorrectAnswer: vec = c('1', 2, 3)
  AnswerTests: test_heter_vec()
  Hint: 請輸入 vec = c('1', 2, 3)

- Class: text
  Output: 有發現嗎? R 會把所有元素轉換成同一種資料類型。

- Class: text
  Output: 如果想儲存異質的資料，我們可以使用 list。

- Class: cmd_question
  Output: 來試試就知道，請輸入 my_list = list('1', 2, 3)
  CorrectAnswer: my_list = list('1', 2, 3)
  AnswerTests: omnitest(correctVal="ans_list")
  Hint: 請輸入 my_list = list('1', 2, 3)

- Class: text
  Output: 跟向量一樣，我們也可以為 list 的欄位取名字。

- Class: text
  Output: 語法跟 vector 語法一樣，試試看建立一個名為 me 的 list 有著 name、age 與 height 三個欄位。

- Class: cmd_question
  Output: 記得把這個 list 命名為 me 喔!
  CorrectAnswer: me = list(name = "Ning Chen", age = 28, height = 168)
  AnswerTests: var_is_a('list', 'me')
  Hint: 請輸入 me = list(name = "your name", age = 18, height = 180)

- Class: cmd_question
  Output: 這樣有名字的 list，也可以跟 vector 一樣，用姓名存取資料。試著玩看看吧，玩完請輸入 skip() 繼續。
  CorrectAnswer: '"TWUseR Rocks"'
  AnswerTests: omnitest('"TWUseR Rocks"')
  Hint: 輸入 skip() 繼續。

- Class: text
  Output: Data Frame....

- Class: text
  Output: Factor....
